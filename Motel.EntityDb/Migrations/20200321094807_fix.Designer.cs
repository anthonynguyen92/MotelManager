// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motel.EntityDb.EF;

namespace Motel.EntityDb.Migrations
{
    [DbContext(typeof(MotelDbContext))]
    [Migration("20200321094807_fix")]
    partial class fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserToken");
                });

            modelBuilder.Entity("Motel.EntityDb.Entities.AppRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Motel.EntityDb.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Motel.EntityDb.Entities.Customer", b =>
                {
                    b.Property<Guid>("IDuser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDuser");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            IDuser = new Guid("f1fad0e9-5a78-4987-b09a-6878d238f1a6"),
                            Address = "Ho Chi Minh",
                            Birthdate = new DateTime(1998, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Duongthuy111298@gmail.com",
                            FirstName = "Thuy",
                            Identification = "183218131",
                            LastName = "Duong Thi Thu",
                            PhoneNumber = "0963902609"
                        });
                });

            modelBuilder.Entity("Motel.EntityDb.Entities.InforBill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ElectricBill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MonthRent")
                        .HasColumnType("int");

                    b.Property<Guid?>("MotelRoomid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ParkingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RoomBil")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WaterBill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WifiBill")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MotelRoomid");

                    b.ToTable("InforBills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c73a2ae-8116-406d-8710-5e1edb4b7b8b"),
                            ElectricBill = 1m,
                            MonthRent = 1,
                            ParkingFee = 1m,
                            RoomBil = 1m,
                            WaterBill = 1m,
                            WifiBill = 1m
                        });
                });

            modelBuilder.Entity("Motel.EntityDb.Entities.MotelRoom", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<int>("BedRoom")
                        .HasColumnType("int");

                    b.Property<string>("NameRoom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Toilet")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("MotelRooms");

                    b.HasData(
                        new
                        {
                            id = new Guid("3dd6f0d0-f930-49da-8d7e-6d7fca1f0647"),
                            Area = 123,
                            BedRoom = 1,
                            NameRoom = "Anthony's Room",
                            Payment = 12m,
                            Status = true,
                            Toilet = 1
                        });
                });

            modelBuilder.Entity("Motel.EntityDb.Entities.Rent", b =>
                {
                    b.Property<Guid>("IdRent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FKCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FKMotel")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("IdRent");

                    b.HasIndex("FKCustomer")
                        .IsUnique()
                        .HasFilter("[FKCustomer] IS NOT NULL");

                    b.HasIndex("FKMotel")
                        .IsUnique()
                        .HasFilter("[FKMotel] IS NOT NULL");

                    b.ToTable("Rents");

                    b.HasData(
                        new
                        {
                            IdRent = new Guid("125e3fa2-e3fa-417c-9417-be7949c21c3d"),
                            Start = new DateTime(2020, 3, 21, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Motel.EntityDb.Entities.InforBill", b =>
                {
                    b.HasOne("Motel.EntityDb.Entities.MotelRoom", "MotelRoom")
                        .WithMany("InforBills")
                        .HasForeignKey("MotelRoomid");
                });

            modelBuilder.Entity("Motel.EntityDb.Entities.Rent", b =>
                {
                    b.HasOne("Motel.EntityDb.Entities.Customer", "Customer")
                        .WithOne("Rent")
                        .HasForeignKey("Motel.EntityDb.Entities.Rent", "FKCustomer");

                    b.HasOne("Motel.EntityDb.Entities.MotelRoom", "MotelRoom")
                        .WithOne("Rent")
                        .HasForeignKey("Motel.EntityDb.Entities.Rent", "FKMotel");
                });
#pragma warning restore 612, 618
        }
    }
}
